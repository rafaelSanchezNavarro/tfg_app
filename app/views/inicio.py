import pandas as pd
import streamlit as st
from app.logic.load_data import (
    load_X_tsne_con_test,
    load_csv,
    load_model,
    load_y_test,
    load_X_tsne,
    load_y_train_class2,
    default_supervised_model,
    default_isolation_model,
    default_dbsan_model,
)
from app.logic.producer import start_simulated_traffic
from app.views import show_architecture_2, show_dbscan, show_isolation

def show():
    # === Estilos personalizados ===
    st.markdown("""
<style>
/* Fondo general */
html, body, .main {
    background-color: #FFFFFF;
}

/* T√≠tulos y textos */
h1, h2, h3, .stMarkdown {
    color: #333333;
}

/* Contenedor principal */
.block-container {
    padding: 2rem;
    background-color: #FFFFFF;
}

/* Botones */
.stButton>button {
    background-color: #D5E8D4;
    color: black;
    border-radius: 6px;
    padding: 0.4rem 1rem;
    border: 1px solid #999999;
    font-weight: 600;
}
.stButton>button:hover {
    background-color: #BBBBBB;
    color: black;
}

/* Expanders */
details > summary {
    background-color: #DAE8FC !important;
    color: #000 !important;
    padding: 10px;
    border-radius: 8px;
    font-weight: bold;
    border: 1px solid #D5E8D4;
}
details[open] {
    background-color: #DAE8FC !important;
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #D5E8D4;
    margin-bottom: 10px;
}

/* Checkbox y file uploader */
.stCheckbox>label {
    color: #000000;
    background-color: transparent;
    font-weight: 500;
    margin-left: 6px;
}
.stFileUploader {
    background-color: #DAE8FC;
    padding: 10px;
    border-radius: 5px;
}
</style>
""", unsafe_allow_html=True)

    # === PRESENTACI√ìN ROJA ===
    st.markdown("""
<div style="background-color:#F8CECC; padding:20px; border-radius:10px;">
    <h1 style="color:#000000;">üìä Trabajo de Fin de Grado</h1>
    <h3 style="margin-top:0;">Modelos de Aprendizaje Autom√°tico para la Detecci√≥n de Intrusos en Sistemas IIoT</h3>
    <p><strong>Autor:</strong> Rafael S√°nchez Navarro</p>
    <p><strong>Grado:</strong> Ingenier√≠a Inform√°tica</p>
    <p><strong>Universidad:</strong> Universidad de Castilla-La Mancha ‚Äì Escuela Superior de Ingenier√≠a Inform√°tica</p>
</div>
<br/>
""", unsafe_allow_html=True)

    # === DESCRIPCI√ìN AZUL ===
    st.markdown("""
<div style="background-color:#DAE8FC; padding:15px; border-radius:10px;">
    <h3 style="margin-bottom:0;">üß≠ Descripci√≥n de la Aplicaci√≥n</h3>
    <p style="margin-top:5px;">
        Esta herramienta ha sido desarrollada como parte de un Trabajo de Fin de Grado con el objetivo de facilitar el an√°lisis de tr√°fico en entornos IIoT mediante t√©cnicas de aprendizaje autom√°tico.
        Proporciona una interfaz interactiva y accesible para evaluar distintos modelos, tanto supervisados como no supervisados, aplicados a flujos de datos simulados o cargados por el usuario.
    </p>
</div>
<br/>
""", unsafe_allow_html=True)

    # === FUNCIONALIDADES ===
    st.markdown("### üéØ Funcionalidades disponibles:")

    with st.expander("üîç Clasificaci√≥n Supervisada"):
        st.markdown("""
        Este m√≥dulo aplica modelos de clasificaci√≥n previamente entrenados para detectar comportamientos an√≥malos en tiempo real.  
        La interfaz muestra las predicciones del modelo para cada muestra, junto con explicaciones generadas mediante LIME, facilitando la interpretaci√≥n de los resultados.  
    
        Para su funcionamiento, el usuario debe cargar dos archivos:  
        - Un conjunto de prueba con las caracter√≠sticas (`X_test`) en formato `.csv`  
        - Las etiquetas reales correspondientes (`y_test`) tambi√©n en formato `.csv`  
    
        Tambi√©n puede utilizar un modelo predefinido o cargar uno propio en formato `.pkl`.
        """)

    with st.expander("üß† Clustering con DBSCAN"):
        st.markdown("""
        Este m√≥dulo aplica el algoritmo DBSCAN para detectar agrupaciones naturales en los datos sin necesidad de etiquetas previas.  
        Esta t√©cnica es especialmente √∫til para identificar patrones an√≥malos en contextos no supervisados, donde no se conoce previamente qu√© es normal o an√≥malo.  
    
        Al finalizar el an√°lisis, cada grupo (cluster) es evaluado: si m√°s del 50% de sus elementos corresponden a anomal√≠as conocidas, **todo el grupo se considera an√≥malo**.  
        A partir de esta clasificaci√≥n binaria, se generan m√©tricas de evaluaci√≥n que permiten medir el rendimiento del modelo, incluyendo:
    
        - Tasa de acierto  
        - Precisi√≥n  
        - Sensibilidad (Recall)  
        - F1-score  
        - Matriz de confusi√≥n  
    
        Puedes utilizar un modelo predefinido o cargar uno propio en formato `.pkl`, junto con un conjunto de prueba en formato `.csv`.
        """)
    
    with st.expander("üö® Detecci√≥n de Anomal√≠as con Isolation Forest"):
        st.markdown("""
        Este m√≥dulo aplica el algoritmo Isolation Forest para detectar observaciones que se desv√≠an significativamente del comportamiento general.  
        Esta t√©cnica es especialmente √∫til para identificar patrones an√≥malos en contextos no supervisados, donde no se conoce previamente qu√© es normal o an√≥malo.  
    
        Al finalizar el an√°lisis, se asigna una clasificaci√≥n binaria a cada observaci√≥n (normal o an√≥mala), y se generan m√©tricas de evaluaci√≥n que permiten medir el rendimiento del modelo, incluyendo:
    
        - Tasa de acierto  
        - Precisi√≥n  
        - Sensibilidad (Recall)  
        - F1-score  
        - Matriz de confusi√≥n  
    
        Puedes utilizar un modelo predefinido o cargar uno propio en formato `.pkl`, junto con un conjunto de prueba en formato `.csv`.
        """)

        
    # === SELECCI√ìN ===
    st.markdown("### üß™ Selecciona una secci√≥n para comenzar:")

    if "seleccion" not in st.session_state:
        st.session_state.seleccion = None

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîé Clasificaci√≥n"):
            st.session_state.seleccion = "clasificacion"
    with col2:
        if st.button("üß† DBSCAN"):
            st.session_state.seleccion = "dbscan"
    with col3:
        if st.button("üö® Isolation Forest"):
            st.session_state.seleccion = "isolation"

    st.markdown("---")

    # === Clasificaci√≥n Supervisada ===
    if st.session_state.seleccion == "clasificacion":
        st.subheader("üîé Clasificaci√≥n Supervisada")

        use_default_model = st.checkbox("Utilizar modelo predeterminado")
        use_default_test = st.checkbox("Utilizar conjunto de prueba predeterminado")

        modelo_clasificacion = (
            default_supervised_model() if use_default_model
            else load_model(label="Cargar modelo de clasificaci√≥n (.pkl)")
        )

        if use_default_test:
            X_test = None
            y_test = load_y_test()
        else:
            st.markdown("#### Cargar conjunto de prueba manual")
            X_test = load_csv(label="Archivo de entrada `X_test` (.csv)")
            y_test = load_csv(label="Archivo de etiquetas `y_test` (.csv)")
            if isinstance(y_test, pd.DataFrame) and y_test.shape[1] == 1:
                y_test = y_test.iloc[:, 0]

        if "producer_started" not in st.session_state:
            st.session_state.producer_started = True
            start_simulated_traffic(X_test=X_test) if X_test is not None else start_simulated_traffic()

        if modelo_clasificacion is not None and y_test is not None:
            show_architecture_2.show(modelo_clasificacion, y_test)

    # === DBSCAN ===
    elif st.session_state.seleccion == "dbscan":
        st.subheader("üß† Clustering con DBSCAN")

        use_default = st.checkbox("Utilizar modelo DBSCAN predeterminado")
        modelo_dbscan = (
            default_dbsan_model() if use_default
            else load_model(label="Cargar modelo DBSCAN (.pkl)")
        )

        if modelo_dbscan is not None:
            X_tsne = load_X_tsne()
            y_train_class3, y_train_class2 = load_y_train_class2()
            if X_tsne is not None and y_train_class2 is not None:
                show_dbscan.show(modelo_dbscan, X_tsne, y_train_class3, y_train_class2)

    # === Isolation Forest ===
    elif st.session_state.seleccion == "isolation":
        st.subheader("üö® Detecci√≥n de Anomal√≠as con Isolation Forest")

        use_default = st.checkbox("Utilizar modelo Isolation Forest predeterminado")
        modelo_isolation = (
            default_isolation_model() if use_default
            else load_model(label="Cargar modelo Isolation Forest (.pkl)")
        )

        if modelo_isolation is not None:
            X_tsne_train, X_tsne_test, y_train_class3_train, y_train_class3_test = load_X_tsne_con_test()
            if X_tsne_train is not None and X_tsne_test is not None and y_train_class3_test is not None:
                show_isolation.show(modelo_isolation, X_tsne_test, y_train_class3_test)
